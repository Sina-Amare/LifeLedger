# This line is auto-generated by Django, e.g., # Generated by Django X.Y on YYYY-MM-DD HH:MM
# The exact Django version and timestamp will match your environment.

from django.db import migrations
# Removed: from django.core.exceptions import LookupError as DjangoLookupError
# LookupError is a Python built-in exception.

def transfer_profile_data_forward(apps, schema_editor):
    """
    Ensures every existing user has a new user_profile.UserProfile instance.
    If the old accounts.UserProfile model is found in the historical state,
    it attempts to transfer the activation_key.
    Otherwise, it proceeds without transferring (for fresh DB setups like tests).
    """
    CustomUser = apps.get_model('accounts', 'CustomUser')
    NewUserProfile = apps.get_model('user_profile', 'UserProfile')
    OldUserProfile = None # Will be set if the model exists in the historical state
    db_alias = schema_editor.connection.alias

    print("\nStarting data migration: Ensuring new profiles and attempting old data transfer...")

    try:
        # Attempt to get the historical model for the old UserProfile
        OldUserProfile = apps.get_model('accounts', 'UserProfile')
        print("  Old accounts.UserProfile model found in historical app registry.")
    except LookupError: # Use the built-in LookupError
        print("  Old accounts.UserProfile model NOT found in historical app registry (expected in fresh/test DBs). Skipping activation_key transfer from old model.")

    for user_instance in CustomUser.objects.using(db_alias).all():
        old_profile_activation_key = None
        
        if OldUserProfile: # Only attempt to get old profile if the OldUserProfile model was successfully retrieved
            try:
                old_profile = OldUserProfile.objects.using(db_alias).get(user_id=user_instance.pk)
                old_profile_activation_key = old_profile.activation_key
                if old_profile_activation_key:
                    print(f"    Found old profile for user '{user_instance.username}' with activation key: {old_profile_activation_key[:8]}... (truncated)")
                else:
                    print(f"    Found old profile for user '{user_instance.username}' but activation key was not set.")
            except OldUserProfile.DoesNotExist:
                print(f"    No old profile found for user '{user_instance.username}'.")
        
        # Ensure a NewUserProfile exists, and set activation_key if transferred
        new_profile_instance, created = NewUserProfile.objects.using(db_alias).update_or_create(
            user=user_instance,
            defaults={'activation_key': old_profile_activation_key} # This will be None if OldUserProfile not found or key was None
        )

        if created:
            operation_status = "CREATED"
        else:
            operation_status = "UPDATED (already existed)"
            
        if OldUserProfile and old_profile_activation_key:
            key_status_message = "COPIED from old profile"
        elif OldUserProfile and not old_profile_activation_key:
            key_status_message = "NOT SET in old profile"
        else: # OldUserProfile model was not found in the historical state
            key_status_message = "NOT APPLICABLE (old model not found)"
            
        print(f"  Successfully {operation_status} new profile for user '{user_instance.username}'. Activation key status: {key_status_message}.")
    
    print("Finished data migration: Ensuring new profiles.")


def transfer_profile_data_backward(apps, schema_editor):
    """
    No-op for reverse, as the original state is complex to restore perfectly
    after the old model is deleted.
    """
    print("\nRunning backward migration for transfer_profile_data (no operation performed).")
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('user_profile', '0001_initial'), 
        ('accounts', '0001_initial'),     # This dependency is correct based on your 0001_initial.py for accounts
    ]

    operations = [
        migrations.RunPython(transfer_profile_data_forward, transfer_profile_data_backward),
    ]
